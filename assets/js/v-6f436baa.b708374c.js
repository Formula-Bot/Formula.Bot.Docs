(self.webpackChunkformula_bot_docs=self.webpackChunkformula_bot_docs||[]).push([[719],{216:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-6f436baa",path:"/plugins/configuration.html",title:"Configuration",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Enabling Configuration for Plugin",slug:"enabling-configuration-for-plugin",children:[]},{level:2,title:"Adding Plugin Configuration",slug:"adding-plugin-configuration",children:[]}],filePathRelative:"plugins/configuration.md",git:{updatedTime:1619216518e3,contributors:[]}}},76:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var e=a(252);const t=(0,e.Wm)("h1",{id:"configuration"},[(0,e.Wm)("a",{class:"header-anchor",href:"#configuration"},"#"),(0,e.Uk)(" Configuration")],-1),o=(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Uk)("For plugins, Formula.Bot allows you to load in "),(0,e.Wm)("code",null,".json"),(0,e.Uk)(" files from a specified directory. You must enable this feature manually within your "),(0,e.Wm)("code",null,"Plugin"),(0,e.Uk)(" instance, explained below.")])],-1),p={class:"table-of-contents"},l=(0,e.Uk)("Enabling Configuration for Plugin"),i=(0,e.Uk)("Adding Plugin Configuration"),c=(0,e.uE)('<h2 id="enabling-configuration-for-plugin"><a class="header-anchor" href="#enabling-configuration-for-plugin">#</a> Enabling Configuration for Plugin</h2><p>By default, plugins are configuration-less; meaning that your plugin has no extra data files attached that it can load. If that is the case however, you will have to define that in your <code>Plugin</code> Instance by adding the interface <code>IPluginSettings</code> to your implementation. This interface takes one generic argument which is the settings model to deserialize your json to.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token comment">// ...</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Core</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">IPluginSettings<span class="token punctuation">&lt;</span>PluginSettings<span class="token punctuation">&gt;</span></span></span> <span class="token comment">// &lt;- note the IPluginSettings</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;ExamplePlugin&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;My example plugin&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name">PluginSettings</span> Settings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginSettings</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> MySetting <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Just before calling <code>Activate</code>, your plugin will load in your settings file from the specified location in your <code>PluginConfigFolder</code>. The filename should follow the following format: <code>PluginName.settings.json</code>, eg <code>ExamplePlugin.settings.json</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;MySetting&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>By default, your deserialized settings type will be provided as the <code>Settings</code> property in your plugin implementation. If you wish, you can apply a singleton pattern to it like so:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginSettings</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">PluginSettings</span> Instance <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> MySetting <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token function">PluginSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>This allows you to fetch the value from anywhere in your plugin.</p><h2 id="adding-plugin-configuration"><a class="header-anchor" href="#adding-plugin-configuration">#</a> Adding Plugin Configuration</h2><p>For plugin configuration, you&#39;ll have to create a <code>.json</code> settings file per plugin. To do such a thing, first make sure your <code>settings.json</code> file is reading the correct plugin config folder location. This can be specified using the <code>$.PluginLoader.PluginConfigFolder</code> property in the settings file. By default this is <code>data/plugins</code>. If you mounted the working container in your docker-compose file to <code>data</code>, you can just create a new folder called <code>plugins</code> and place your configuration files in there. Make sure the plugin configuration files follow the following format: <code>PluginName.settings.json</code>.</p>',10),u={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,o,(0,e.Wm)("nav",p,[(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)(a,{to:"#enabling-configuration-for-plugin"},{default:(0,e.w5)((()=>[l])),_:1})]),(0,e.Wm)("li",null,[(0,e.Wm)(a,{to:"#adding-plugin-configuration"},{default:(0,e.w5)((()=>[i])),_:1})])])]),c],64)}}}}]);