(self.webpackChunkformula_bot_docs=self.webpackChunkformula_bot_docs||[]).push([[851],{471:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-43cb0706",path:"/plugins/development.html",title:"Development",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Creating a new plugin using the plugin template",slug:"creating-a-new-plugin-using-the-plugin-template",children:[]},{level:2,title:"Creating a new plugin",slug:"creating-a-new-plugin",children:[]}],filePathRelative:"plugins/development.md",git:{updatedTime:1619216518e3,contributors:[]}}},874:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>m});var t=a(252);const e=(0,t.Wm)("h1",{id:"development"},[(0,t.Wm)("a",{class:"header-anchor",href:"#development"},"#"),(0,t.Uk)(" Development")],-1),p=(0,t.Wm)("blockquote",null,[(0,t.Wm)("p",null,"Formula.Bot uses a plugin pattern to keep it's core functionally lightweight. If you wish to extend Formula.Bot, you can do so by installing, or developing your own plugins. This page will explain you how to create or install already existing plugins.")],-1),o={class:"table-of-contents"},l=(0,t.Uk)("Creating a new plugin using the plugin template"),c=(0,t.Uk)("Creating a new plugin"),u=(0,t.uE)('<h2 id="creating-a-new-plugin-using-the-plugin-template"><a class="header-anchor" href="#creating-a-new-plugin-using-the-plugin-template">#</a> Creating a new plugin using the plugin template</h2><p>To create a plugin using the plugin template, you will first have to install the plugin template. You can do this by using the <code>dotnet</code> cli command. This allows you to create a new project based on the provided template with one simple command.</p><ol><li>Make sure the plugin template is installed correctly by executing the following command:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new -i Formula.Bot.Templates.Plugin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>Create a new project with the provided template:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new formulabot-plugin -n <span class="token string">&quot;Formula.Bot.Plugins.Example&quot;</span> -o Formula.Bot.Plugins.Example\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>-o</code> -&gt; Output directory to use<br><code>-n</code> -&gt; Namespace to use<br> 3. Confirm the project got created with the correct namespace &amp; folder used. Because you used the plugin template, you will not have to do all the tedious tasks related to the csproj described in &quot;Creating a new plugin&quot;. Do note that you can still execute step 6 from that instruction for automatic build artifacts copying.</p><h2 id="creating-a-new-plugin"><a class="header-anchor" href="#creating-a-new-plugin">#</a> Creating a new plugin</h2>',8),i=(0,t.Uk)("To create a new plugin, make sure the used .NET SDK is installed. Currently, the bot runs on "),r={href:"https://dotnet.microsoft.com/download/dotnet/5.0",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Uk)(".NET 5"),g=(0,t.Uk)(", but this may be changed in the future. Just make sure this matches the core project, as you might otherwise run into issues."),d=(0,t.uE)('<blockquote><p><em>This instruction assumes you use the Visual Studio Code IDE.</em></p></blockquote><ol><li>Create a new class library with the following naming convention: <code>Formula.Bot.Plugins.PluginNamePascalCased</code>. For example, a plugin with the name MyPlugin would become <code>Formula.Bot.Plugins.MyPlugin</code>.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new classlib -n <span class="token string">&quot;Formula.Bot.Plugins.{PLUGIN_NAME}&quot;</span> -o <span class="token string">&quot;Formula.Bot.Plugins.{PLUGIN_NAME}&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>eg</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new classlib -n <span class="token string">&quot;Formula.Bot.Plugins.MyPlugin&quot;</span> -o <span class="token string">&quot;Formula.Bot.Plugins.MyPlugin&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>Add the <code>csproj</code> to the main <code>sln</code> file:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet sln <span class="token function">add</span> <span class="token string">&quot;Formula.Bot.Plugins.{PLUGIN_NAME}/Formula.Bot.Plugins.{PLUGIN_NAME}.csproj&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>eg</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet sln <span class="token function">add</span> <span class="token string">&quot;Formula.Bot.Plugins.MyPlugin/Formula.Bot.Plugins.MyPlugin.csproj&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>Add a reference to the core project:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet <span class="token function">add</span> <span class="token string">&quot;Formula.Bot.Plugins.{PLUGIN_NAME}/Formula.Bot.Plugins.{PLUGIN_NAME}.csproj&quot;</span> reference <span class="token string">&quot;Formula.Bot/Formula.Bot.csproj&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>eg</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet <span class="token function">add</span> <span class="token string">&quot;Formula.Bot.Plugins.MyPlugin/Formula.Bot.Plugins.{PLUGIN_NAME}.csproj&quot;</span> reference <span class="token string">&quot;Formula.Bot/Formula.Bot.csproj&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>To make sure the referenced core project does not get outputted when building, find and change the <code>ProjectReference</code> to add <code>&lt;Private&gt;true&lt;/Private&gt;</code> &amp; <code>&lt;ExcludeAssets&gt;runtime&lt;/ExcludeAssets&gt;</code></li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProjectReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>..\\Formula.Bot\\Formula.Bot.csproj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Private</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Private</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ExcludeAssets</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ExcludeAssets</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ProjectReference</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="5"><li>Add <code>&lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt;</code> to the first <code>PropertyGroup</code>.</li><li>(optional) For easier plugin output copying to the core project, add the following part to your csproj:</li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PostBuild<span class="token punctuation">&quot;</span></span> <span class="token attr-name">AfterTargets</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PostBuildEvent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mkdir -p <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(SolutionDir)Formula.Bot/Plugins<span class="token entity named-entity" title="&quot;">&amp;quot;</span>;cp -RTf <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(TargetDir)<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(SolutionDir)Formula.Bot/Plugins/$(TargetName)<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Target</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="7"><li>Your finished <code>csproj</code> should look something like this:</li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileVersion</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileVersion</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AssemblyVersion</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AssemblyVersion</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CopyLocalLockFileAssemblies</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CopyLocalLockFileAssemblies</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProjectReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>..\\Formula.Bot\\Formula.Bot.csproj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Private</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Private</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ExcludeAssets</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ExcludeAssets</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ProjectReference</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token comment">&lt;!-- Optional --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PostBuild<span class="token punctuation">&quot;</span></span> <span class="token attr-name">AfterTargets</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PostBuildEvent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mkdir -p <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(SolutionDir)Formula.Bot/Plugins<span class="token entity named-entity" title="&quot;">&amp;quot;</span>;cp -RTf <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(TargetDir)<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>$(SolutionDir)Formula.Bot/Plugins/$(TargetName)<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Target</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="8"><li>Project &amp; solution wise, you are done. Now, you need to make sure your initial <code>Plugin</code> class implementation exists. Add a file called <code>Core.cs</code> that implements the <code>Plugin</code> class from the <code>Formula.Bot.Abstractions</code> namespace.</li></ol><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Formula<span class="token punctuation">.</span>Bot<span class="token punctuation">.</span>Abstractions</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">Formula<span class="token punctuation">.</span>Bot<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span>MyPlugin</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Core</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Plugin</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;MyPlugin&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;This is my super cool plugin. Yup, I made this myself.&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="9"><li>This is the minimal you need for your plugin to be recognized. Though, this in and of itself is not quite useful. Let&#39;s add a <code>Activate</code> event handler. This is a virtual method in the <code>Plugin</code> class that you can override by typing</li></ol><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// ...</span>\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">Activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In here, you can add anything you want to be executed when the plugin gets loaded in and initialized.<br> 10. Though, at some point you may also want to reload a plugin. For that to work, you will also need to register a <code>Terminate</code> handler in the event that you leave any existing references to the core project that the GC cannot cleanup.</p><blockquote><p><strong>Note!</strong> It is very important to make sure your referenced objects are cleaned up, otherwise you may leak the PluginContextLoader which leads to a wrong unloaded plugin that may result in unexpected behavior.</p></blockquote><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// ...</span>\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">Terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',26),m={render:function(n,s){const a=(0,t.up)("RouterLink"),m=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,p,(0,t.Wm)("nav",o,[(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)(a,{to:"#creating-a-new-plugin-using-the-plugin-template"},{default:(0,t.w5)((()=>[l])),_:1})]),(0,t.Wm)("li",null,[(0,t.Wm)(a,{to:"#creating-a-new-plugin"},{default:(0,t.w5)((()=>[c])),_:1})])])]),u,(0,t.Wm)("p",null,[i,(0,t.Wm)("a",r,[k,(0,t.Wm)(m)]),g]),d],64)}}}}]);